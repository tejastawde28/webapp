name: Packer Build

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --upgrade --no-cache-dir

      - name: Run Integration Tests
        env:
          TESTING: "True"
        run: |
          pytest --verbose

  build-custom-image:
    name: Build Custom Image with Packer
    needs: integration-test
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.extract_ami.outputs.ami_id }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify GitHub Secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          # GCP_DEMO_CREDENTIALS: ${{ secrets.GCP_DEMO_CREDENTIALS }}
        run: |
          if [[ -z "$AWS_ACCESS_KEY_ID" || -z "$AWS_SECRET_ACCESS_KEY" ]]; then
            echo "❌ AWS credentials are missing in GitHub Secrets!"
            exit 1
          fi
          # if [[ -z "$GCP_CREDENTIALS" ]]; then
          #   echo "❌ GCP credentials are missing in GitHub Secrets!"
          #   exit 1
          # fi
          # if [[ -z "$GCP_DEMO_CREDENTIALS" ]]; then
          #   echo "❌ GCP demo credentials are missing in GitHub Secrets!"
          #   exit 1
          # fi

      - name: Configure AWS Credentials (DEV Account)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          echo "AWS DEV account credentials set."

      - name: Verify AWS Identity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: aws sts get-caller-identity

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Enable Packer Logging
        env:
          PACKER_LOG: 1
          PACKER_LOG_PATH: "packer.log"
        run: echo "Packer logging enabled."

      - name: Build Image with Packer
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          # DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          PACKER_LOG: 1
          PACKER_LOG_PATH: "packer.log"
        run: |
          packer init packer/webapp.pkr.hcl
          packer build -machine-readable packer/webapp.pkr.hcl | tee packer-output.log

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(grep "amazon-ebs.webapp-ami,artifact,0,id" packer-output.log | cut -d: -f2)
          if [ -z "$AMI_ID" ]; then
            echo "Failed to extract AMI ID, trying alternate format..."
            AMI_ID=$(grep "artifact,0,id" packer-output.log | cut -d: -f2 | cut -d, -f2)
            if [ -z "$AMI_ID" ]; then
              echo "Failed to extract AMI ID"
              exit 1
            fi
          fi
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "AMI ID: $AMI_ID"

      - name: Upload Packer Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packer-logs
          path: packer.log

  deploy-to-demo:
    name: Deploy to DEMO Environment
    needs: build-custom-image
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials (DEMO Account)
        env:
          DEMO_AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          DEMO_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}
          echo "DEMO AWS credentials set."

      - name: Verify AWS Identity (DEMO Account)
        run: aws sts get-caller-identity

      - name: Get Current Launch Template
        id: get_launch_template
        run: |
          LAUNCH_TEMPLATE_INFO=$(aws ec2 describe-launch-templates --launch-template-names webapp-launch-template)
          LAUNCH_TEMPLATE_ID=$(echo $LAUNCH_TEMPLATE_INFO | jq -r '.LaunchTemplates[0].LaunchTemplateId')
          LATEST_VERSION=$(echo $LAUNCH_TEMPLATE_INFO | jq -r '.LaunchTemplates[0].LatestVersionNumber')
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> $GITHUB_OUTPUT
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID, Latest Version: $LATEST_VERSION"

      - name: Create New Launch Template Version with New AMI
        id: create_template_version
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ steps.get_launch_template.outputs.launch_template_id }} \
            --version-description "New AMI version from CI/CD pipeline" \
            --source-version ${{ steps.get_launch_template.outputs.latest_version }} \
            --launch-template-data '{"ImageId":"${{ needs.build-custom-image.outputs.ami_id }}"}' \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New Launch Template Version: $NEW_VERSION"

      - name: Set New Version as Default
        run: |
          aws ec2 modify-launch-template \
            --launch-template-id ${{ steps.get_launch_template.outputs.launch_template_id }} \
            --default-version ${{ steps.create_template_version.outputs.new_version }}
          
          echo "Set version ${{ steps.create_template_version.outputs.new_version }} as default"

      - name: Get Auto Scaling Group Name
        id: get_asg
        run: |
          # Try first to get it by exact name since we know it
          ASG_NAME="webapp-asg"
          
          # Verify the ASG exists
          ASG_CHECK=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query 'length(AutoScalingGroups)' --output text)
          
          if [ "$ASG_CHECK" -eq "0" ]; then
            echo "ASG named 'webapp-asg' not found, trying to find by tags..."
            
            # Fall back to original logic of searching by tags
            ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
              --query 'AutoScalingGroups[?contains(Tags[?Key==`Name`].Value, `webapp-asg`)].AutoScalingGroupName' \
              --output text)
            
            if [ -z "$ASG_NAME" ]; then
              echo "Failed to find Auto Scaling Group"
              exit 1
            fi
          fi
          
          echo "asg_name=$ASG_NAME" >> $GITHUB_OUTPUT
          echo "Auto Scaling Group Name: $ASG_NAME"

      # Removed the "Update Auto Scaling Group" step since ASG is already using $Latest

      - name: Start Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ steps.get_asg.outputs.asg_name }} \
            --preferences '{"MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' --output text)
          
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT
          echo "Instance Refresh ID: $REFRESH_ID"

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
          REFRESH_INFO=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ steps.get_asg.outputs.asg_name }} \
            --instance-refresh-ids ${{ steps.start_refresh.outputs.refresh_id }} \
            --query 'InstanceRefreshes[0]' --output json)
          
          REFRESH_STATUS=$(echo $REFRESH_INFO | jq -r '.Status')
          PROGRESS_PERCENTAGE=$(echo $REFRESH_INFO | jq -r '.PercentageComplete // 0')
          
          echo "Instance Refresh Status: $REFRESH_STATUS"
          echo "Progress: $PROGRESS_PERCENTAGE%"
          
          if [ "$REFRESH_STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully!"
            break
          elif [ "$REFRESH_STATUS" == "Failed" ] || [ "$REFRESH_STATUS" == "Cancelled" ]; then
            echo "Instance refresh failed or was cancelled"
            exit 1
          fi
          
          echo "Waiting for instance refresh to complete..."
          sleep 30
            done